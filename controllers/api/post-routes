const router = require('express').Router();
const sequelize = require('../../config/connection');
const { Post, User, Vote } = require('../../models');

// get all posts***
router.get('/', (req, res) => {
  console.log('======================');
  Post.findAll({
    attributes: [
      'id',
      'city_name',
      'restaurant_name',
      'restaurant_url',
      'comment_text',
      'photo',
      'user_id',
      'created_at',
      [sequelize.literal('(SELECT COUNT(*) FROM vote WHERE post.id = vote.post_id)'), 'vote_count']
    ],
    include: [
      {
        model: User,
        attributes: ['username']
      }
    ]
  })
    .then(dbPostData => res.json(dbPostData))
    .catch(err => {
      console.log(err);
      res.status(500).json(err);
    });
});

// get posts based on city search***
router.get('/:city_name', (req, res) => {
  Post.findAll({
    where: {
      city_name: req.params.city_name
    },
    attributes: [
      'id',
      'city_name',
      'restaurant_name',
      'restaurant_url',
      'comment_text',
      'photo',
      'user_id',
      'created_at',
      [sequelize.literal('(SELECT COUNT(*) FROM vote WHERE post.id = vote.post_id)'), 'vote_count']
    ],
    include: [
      {
        model: User,
        attributes: ['username']
      }
    ]
  })
  .then(dbPostData => {
    const posts = dbPostData.map(post => post.get({ plain: true }));

    res.render('city', {
      posts,
      loggedIn: req.session.loggedIn
    });
  })
  .catch(err => {
    console.log(err);
    res.status(500).json(err);
  });
});




// post a new post****
router.post('/', (req, res) => {
  if (req.session) {
    Post.create({
      city_name: req.body.city_name,
      restaurant_name: req.body.restaurant_name,
      restaurant_url: req.body.restaurant_url,
      comment_text: req.body.comment_text,
      photo: req.body.photo,
      user_id: req.session.user_id
    })
      .then(dbPostData => res.json(dbPostData))
      .catch(err => {
        console.log(err);
        res.status(500).json(err);
      });
  }
});

// upvote route****
router.put('/upvote', (req, res) => {
  if (req.session) {
    Post.upvote({ ...req.body, user_id: req.session.user_id }, { Vote, User })
      .then(updatedVoteData => res.json(updatedVoteData))
      .catch(err => {
        console.log(err);
        res.status(500).json(err);
      });
  }
});

// delete a post***
router.delete('/:id', (req, res) => {
  console.log('id', req.params.id);
  Post.destroy({
    where: {
      id: req.params.id
    }
  })
    .then(dbPostData => {
      if (!dbPostData) {
        res.status(404).json({ message: 'No post found with this id' });
        return;
      }
      res.json(dbPostData);
    })
    .catch(err => {
      console.log(err);
      res.status(500).json(err);
    });
});

module.exports = router;